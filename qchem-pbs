#!/usr/bin/env python3

# qchem-pbs can replace omniqchem.csh and node_local_qchem.csh on
# venus, diabatical, and helium. Pass -h for help; contact
# valecs@sas.upenn.edu if something seems broken.


import os, subprocess
from pathlib import Path
from socket import gethostname
from collections import defaultdict
import argparse
import time


ncpus = defaultdict(lambda: print("Warning: unknown cluster---thread limit may be unreliable!") or 1024,
                    {'venus': 48,
                     'mustang': 48,
                     'diabatical': 32,
                     'helium': 32,  # FIXME: is this correct?
                     }
                    )


def host():
    return gethostname().split('.')[0]


def getArgs():
    parser = argparse.ArgumentParser(description='Execute Q-Chem on a node via PBS; MPI jobs not supported')
    parser.add_argument("input", metavar="QCINPUT", type=Path, help="Q-Chem input file")
    parser.add_argument("--dry-run", "-n", default=False, action='store_true',
                        help="Don't acutally launch the job; just verify parameters")

    parser.add_argument("--output", "-o", metavar="OUTPUT", type=Path,
                        help="Q-Chem output file; determined automatically from input if omitted")
    parser.add_argument("--threads", "-t", metavar="THREADS", default=4, type=int,
                        help="Number of OpenMP threads to use; defaults to 4")
    parser.add_argument("--mem", "-m", metavar="MEMORY", default=8192, type=int,
                        help="Max memory in MB; defaults to 8192")
    parser.add_argument("--queue", "-q", metavar="QUEUE", type=str,
                        help="queue for job submission (optional)")
    parser.add_argument("--branch", "-b", metavar="BRANCH", type=Path,
                        help="Full path to Q-Chem branch; if $QCRT is set, may simply be name of branch below $QCRT")
    parser.add_argument("--save", default=False, action='store_true', help="save scratch files to ODIR/scratch")
    parser.add_argument("--outdir", metavar="ODIR", default="./run",
                        type=Path, help="Path to output scratch files; defaults to ./run")
    parser.add_argument("--indir", metavar="IDIR", type=Path,
                        help="Path to input directory for restartable jobs (ODIR from a previous job)")
    parser.add_argument("--wall", "-w", metavar="WALL", default=12, type=float, help="max wall-clock time in hours (defaults to 12)")
    parser.add_argument("--bare", default=False, action='store_true', help="use bare qcprog.exe instead of qchem script")
    parser.add_argument("--sbatch", default=False, action='store_true', help="submit via sbatch (slurm) rather than pbs")
    parser.add_argument("--coredump", default=False, action='store_true', help="save a core-dump in the event of a crash")

    return parser.parse_args()


def env(key, value=None, prepend=False):
    """Returns or sets an environmental variable"""
    if value is None:
        if key in os.environ.keys():
            return os.environ[key]
        else:
            return ""
    else:
        if prepend:
            os.environ[key] = str(value) + ':' + os.environ[key]
        else:
            os.environ[key] = str(value)


def isValidQC(path):
    """Determines if the path is a valid Q-Chem install"""
    return (Path(path) / "exe/qcprog.exe").exists()


# FIXME: split validate() over several functions
def validate(args):
    """Validates CLI args and environmental variables, setting the latter as necessary"""
    invalid = 0

    if not args.input.is_file():
        invalid += 1
        print("Input file", args.input, "is not a file!")

    if args.output is None:
        args.output = Path(args.input.with_suffix(".out").name)

    if args.output.exists():
        invalid += 1
        print("Output file", args.output, "already exists!")

    tmax = ncpus[host()]
    if args.threads < 1 or args.threads > tmax:
        invalid += 1
        print("Must have at least 1 thread and no more than", tmax, "on", host(),"!")
    else:
        env("QCTHREADS", args.threads)
        
    if args.wall <= 0:
        invalid += 1
        print("Wall-clock time must be finite!")

        
    if args.mem <= 0:
        invalid += 1
        print("Memory requested must be finite!")

    if args.indir is not None and not args.indir.is_dir():
        invalid += 1
        print("Input directory", args.indir, "is not a directory!")

    if args.outdir.is_absolute():
        invalid +=1
        printf("The argument to --outdir must be a relative path!")

    # FIXME: These won't get picked up if a user's .bashrc overwrites
    # them when the job gets run; we need to do the change in the
    # scripts
    if args.branch is not None:
        if isValidQC(args.branch):
            env("QC", args.branch)
        elif isValidQC(env("QCRT") / args.branch):
            args.branch = env("QCRT") / args.branch
            env("QC", args.branch)
        else:
            print("branch", args.branch, "cannot be found and/or $QCRT not set!")
            invalid += 1
        env("LD_LIBRARY_PATH", args.branch / "lib", prepend=True)
        env("QCPROG", args.branch / "exe/qcprog.exe")

    if not isValidQC(env("QC")):
        invalid += 1
        print("Valid Q-Chem install not found at $QC!")

    args.qcscratch = Path(env("QCSCRATCH"))
    if not args.qcscratch.is_absolute():
        invalid += 1
        print("$QCSCRATCH must be an absolute path!")

    for var in ["QCAUX"]:
        if not Path(env(var)).is_absolute() or not Path(env(var)).exists():
            invalid += 1
            print("Q-Chem requires that the variable", var, "be set and exist!")

    if env("QCPLATFORM") == "":
        invalid += 1
        print("Q-Chem requires that the variable", "QCPLATFORM", "be set!")

    return invalid


#FIXME: unify script generation so there's only 1 place to update
def getScript_bare(args):
    """Calls qcprog.exe directly"""
    
    script = []

    name = args.input.stem
    scratch = args.qcscratch / Path(name).with_suffix(f".{time.time()}.$PBS_JOBID")

    script.append('#!/bin/sh')
    script.append('echo job starts at $(date)')
    script.append('echo')
    script.append(f'mkdir -p {scratch / args.outdir}')

    if args.indir is not None:
        # trailing slash required to copy contents
        script.append(f'rsync -ar "{args.indir.absolute()}/." "{scratch / args.outdir}"')

    script.append(f'cd "{scratch}"')

    # optionally save a core dump
    if args.coredump:
        script.append(f'ulimit -c unlimited')

    script.append(f'$QC/exe/qcprog.exe "{args.input.absolute()}" "{scratch / args.outdir}"')
    if not args.save:
        script.append(f"rm -rf {args.outdir}")
        
    # trailing slash required to copy contents from scratch
    script.append(f'rsync -ar "{scratch}/." "{args.cwd}"')
    script.append('echo')
    script.append('echo job completes at $(date)')
    
    return b"\n".join(map(lambda s: bytes(s, encoding="ascii"), script))


# FIXME: unlike with --bare, we do not fully specify the run directory
def getScript(args):
    """This function works by building up a list of shell (or pbs)
    statements and then joining them all together in a bytestream"""

    script = []

    runname = args.input.stem
    rundir = args.qcscratch / runname
    infile = args.input.absolute()
    outfile = rundir.with_suffix(".out")

    script.append('#!/bin/sh')
    script.append('echo job starts at $(date)')
    script.append('echo')

    if args.indir is not None:
        # trailing slash required to copy contents
        script.append(f'rsync -ar "{args.indir.absolute()}/." "{rundir}"')

    script.append(f'cd "{args.cwd}"')

    # optionally save a core dump
    if args.coredump:
        script.append(f'ulimit -c unlimited')

    # FIXME: prepare qcargs in 1 place so everything is updated together
    if args.save:
        script.append(f'$QC/bin/qchem -save -nt {args.threads} "{infile}" "{outfile}" "{runname}"')
        script.append(f'rsync -ar "{rundir}/." "{args.cwd/args.outdir}"')
    else:
        script.append(f'$QC/bin/qchem -nt {args.threads} "{infile}" "{outfile}" "{runname}"')

    script.append(f'cat "{outfile}"')

    script.append(f'rm "{outfile}"')
    script.append(f'rm -r "{rundir}"')

    script.append('echo')
    script.append('echo job completes at $(date)')
    
    return b"\n".join(map(lambda s: bytes(s, encoding="ascii"), script))


def main():
    args = getArgs()
    invalid = validate(args)  # validates & sets $QCTHREADS, $QC, etc...
    args.cwd=Path(".").absolute()

    if invalid > 0:
        print(invalid, "invalid option(s); cannot proceed")
        exit(-1)
    else:
        print("Finished checking input.")

    if args.bare:
        script = getScript_bare(args)
    else:
        script = getScript(args)

    if args.dry_run:
        print("[qchem-pbs] script:")
        print(script.decode('ascii'))
        print("\n\n")
        print("[qchem-pbs] environment:")
        for k in os.environ.keys():
            print(k,"=", os.environ[k])
        exit(0)

    if args.save:
        args.outdir.mkdir(parents=True, exist_ok=True)


    qsub = ["qsub", "-V", "-j", "oe",
            "-o", str(args.output.absolute()),
            "-N", str(args.input.stem),
            "-l", "nodes=1:ppn=" + str(args.threads),
            "-l", "mem=" + str(args.mem) + "mb",
            "-l", "walltime=" + str(round(args.wall*3600)),
            ]

    # FIXME: might want to contol the submission partition;
    #   could do it via --partition or $SBATCH_PARTITION
    sbatch = ["sbatch", "--export=ALL",
              "--output=" + str(args.output.absolute()),
              "--job-name=" + str(args.input.stem),
              "--ntasks=1", "--cpus-per-task=" + str(args.threads),
              "--mem=" + str(args.mem),       # MB are default units
              "--time=" + str(round(args.wall*60)),  # minutes are default interval
              ]

    if args.queue:
        qsub.append("-q")
        qsub.append(args.queue)


    if args.sbatch:
        subprocess.run(sbatch, input=script)
    else:
        subprocess.run(qsub, input=script)


if __name__ == "__main__":
    main()
